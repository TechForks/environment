#!/usr/bin/env ruby

#
# Copyright (c) 2013 by Lifted Studios. All Rights Reserved.
#

# Planned functionality:
#
# 1. Create a temporary directory
# 2. Back up the database
# 3. Back up the uploads directory
# 4. Create a compressed archive out of all of it (with date and time in the name)
# 5. Upload everything to S3
# 6. Delete temporary directory
# 7. Expire old backups from S3

require 'logger'
require 'ostruct'
require 'optparse'
require 'rake'
require 'time'
require 'tmpdir'

# Back up the Discourse database.
#
# @param dir Directory to which to back up the database.
def backup_database(dir)
  $log.info "Start database backup"

  backup_file = File.join(dir, "discourse.bak")
  sh "sudo -u postgres pg_dump discourse > #{backup_file}"

  $log.info "End database backup"

  nil
end

# Returns the directory into which backup archives are placed.
def backup_dir
  File.join(ENV["HOME"], "backup")
end

# Returns the absolute path for a backup archive.
def backup_file
  File.join(backup_dir, "discourse-#{Time.now.utc.strftime("%Y%m%dT%H%M%SZ")}.tar.bz2")
end

# Backs up the uploads directory.
#
# @param dir Directory to which to back up the uploads.
def backup_uploads(dir)
  $log.info "Start uploads backup"

  backup_dir = File.join(dir, "uploads")
  cp_r "/var/www/discourse/public/uploads/default", backup_dir

  $log.info "End uploads backup"

  nil
end

# Configures the logging object according to the supplied options object.
#
# @param [OpenStruct] options Options gathered from the command line.
# @return [Logger] Initialized logging object.
def configure_logging(options)
  log = Logger.new(STDOUT)

  if options.verbose
    log.level = Logger::INFO
  else
    log.level = Logger::WARN
  end

  log
end

# Create an archive out of the temp backup directory.
#
# @param dir Directory in which the temp backup exists.
def create_archive(dir)
  file = backup_file

  $log.info "Start create archive: #{file}"
  sh "tar cvjf #{file} #{dir}"
  $log.info "End create archive"

  file
end

# Parses the command line options.
#
# @param args Array of command-line arguments.
# @return [OpenStruct] Options for the execution of the program.
def parse_options(args)
  options = OpenStruct.new
  options.verbose = false

  parser = OptionParser.new do |p|
    p.banner = "Usage: #{p.program_name} [options]"

    p.separator ""
    p.separator "Specific options:"

    p.on("-v", "--[no-]verbose", "Verbose output") do |v|
      options.verbose = v
    end

    p.separator ""
    p.separator "Common options:"

    p.on_tail("-h", "--help", "Show this message") do
      puts p
      exit
    end
  end

  parser.parse!(args)

  options
end

options = parse_options(ARGV)
$log = configure_logging(options)

file = Dir.mktmpdir do |tmpdir|
  backup_database(tmpdir)
  backup_uploads(tmpdir)

  mkdir backup_dir unless Dir.exists? backup_dir

  create_archive(tmpdir)
end
